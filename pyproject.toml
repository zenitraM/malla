[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "malla"
version = "0.1.0"
description = "A comprehensive web UI for browsing and analyzing Meshtastic mesh network health data"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Malla Contributors"},
]
maintainers = [
    {name = "Malla Contributors"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: Flask",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Communications :: Ham Radio",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Networking :: Monitoring",
]
requires-python = ">=3.12"
dependencies = [
    "flask>=3.0.0",
    "gunicorn>=22.0.0",
    "paho-mqtt>=2.1.0",
    "meshtastic>=2.6.0",
    "plotly>=5.17.0",
    "pyyaml>=6.0",
    "tabulate>=0.9.0",
    "tenacity>=9.1.0",
    "cryptography>=45.0.3",
    "types-protobuf>=6.30.2.20250516",
    "types-flask-cors>=6.0.0.20250520",
    "markdown>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/zenitraM/malla"
Documentation = "https://github.com/zenitraM/malla#readme"
Repository = "https://github.com/zenitraM/malla.git"
Issues = "https://github.com/zenitraM/malla/issues"

[project.scripts]
malla-web = "malla.web_ui:main"
malla-web-gunicorn = "malla.wsgi:main"
malla-capture = "malla.mqtt_capture:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "coverage>=7.6.0",
    "line-profiler>=4.2.0",
    "py-spy>=0.4.0",
]

# Hatch configuration
[tool.hatch.version]
path = "src/malla/__init__.py"

[tool.hatch.build]
include = [
    "src/malla/**/*.py",
    "src/malla/templates/**/*.html",
    "src/malla/static/**/*",
    "README.md",
    "LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/malla"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "tests/",
    "README.md",
    "LICENSE",
    "pyproject.toml",
    "malla-web",
    "malla-web-gunicorn",
    "malla-capture",
]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "-n=auto",
    "--color=yes",
    "--durations=10",
    "--durations-min=1.0",
    "--show-capture=no",
    "--maxfail=5",
]
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/malla"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]



[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.ruff.format]
# Enable the formatter
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.basedpyright]
pythonVersion = "3.13"
typeCheckingMode = "standard"

# Include and exclude patterns
include = ["src", "tests"]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/node_modules",
    "**/.venv",
    "**/venv",
    "build",
    "dist"
]

# Ignore specific modules that have complex typing issues
ignore = [
]

[dependency-groups]
dev = [
    "basedpyright>=1.29.4",
    "playwright>=1.52.0",
    "pytest-asyncio>=1.0.0",
    "pytest-playwright>=0.7.0",
    "ruff>=0.11.13",
    "pytest-xdist>=3.6.0",
    "pytest-flask>=1.3.0"
]
